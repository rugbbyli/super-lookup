{"version":3,"file":"functions.js","mappings":"6BAAKA,GAAL,SAAKA,GACDA,EAAAA,EAAAA,OAAAA,GAAAA,SACAA,EAAAA,EAAAA,SAAAA,GAAAA,UACH,EAHD,CAAKA,IAAAA,EAAS,KAoFdC,gBAAgBC,UAAU,QApE1B,SAAqBC,GACjB,cAAcA,CAClB,IAmEAF,gBAAgBC,UAAU,WA1D1B,SAAwBE,EAAgBC,EAAYC,GAChD,IAAiB,QAAAC,EAAAA,EAAAC,EAAAA,EAAAA,OAAAA,IAAO,CAApB,IAAMC,EAAG,KACT,GAAGA,EAAI,IAAMJ,EAAO,OAAOI,EAAIH,EAAM,E,CAEzC,MAAM,IAAIL,gBAAgBS,MAAMT,gBAAgBU,UAAUC,aAAc,kBAC5E,IAsDAX,gBAAgBC,UAAU,iBA3C1B,SAA8BE,EAAgBS,EAAqBC,EAAmBC,GAClFC,QAAQC,IAAI,SAAWb,GACvBY,QAAQC,IAAI,aAAcF,GAC1B,IAAMZ,EA6BV,SAA0BY,GAGtB,IAFA,IAAMZ,EAAO,GACTe,EAAOH,EACJG,EAAKC,QAAU,GAClBhB,EAAKiB,KAAKF,EAAKG,MAAM,EAAG,IACxBH,EAAOA,EAAKG,MAAM,GAEtB,OAAOlB,CACX,CArCiBmB,CAAiBP,GAE9B,GADAC,QAAQC,IAAI,QAASd,GACH,GAAfA,EAAKgB,OAAR,CACA,I,eAAQI,GACJ,IAAMd,EAAML,EAAMmB,GACZC,EAAUrB,EAAKsB,QAAO,SAACC,G,IAACpB,EAAK,KAAED,EAAK,KAAEsB,EAAI,KAC5C,OAaZ,SAAiBtB,EAAYuB,EAAYD,GACrC,OAAGA,GAAQ3B,EAAU6B,OACVxB,GAASuB,EAEjBD,GAAQ3B,EAAU8B,UACVC,OAAO1B,GAAO2B,SAASD,OAAOH,GAG7C,CArBmBK,CAAQxB,EAAIH,EAAM,GAAID,EAAOsB,EACxC,IAEA,GADAX,QAAQC,IAAI,cAAOR,EAAG,mBAAWe,EAAQL,SACtCK,EAAQL,QAAUhB,EAAKgB,O,OACtBH,QAAQC,IAAI,uBAAgBR,EAAG,oBAAYA,EAAII,EAAY,K,OACpDJ,EAAII,EAAY,G,EARvBU,EAAI,EAAGA,EAAInB,EAAMe,OAAQI,IAAK,C,QAA9BA,G,qCAWR,OAAOT,CAZoB,CAa/B,G","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["enum MatchMode {\n    Equals = 0,\n    Contains = 1,\n}\n\ninterface MatchFunc {\n    Index: number\n    Value: any\n    Mode: MatchMode\n}\n\n/**\n * @customfunction\n * @param [args] \n * @returns \n */\nexport function test(args: any) {\n    return typeof(args)\n}\n\n/**\n * @customfunction\n * @param range \n * @param value \n * @param index \n * @returns \n */\nexport function vlookup(range: any[][], value: any, index: number) {\n    for(const row of range) {\n        if(row[0] == value) return row[index-1]\n    }\n    throw new CustomFunctions.Error(CustomFunctions.ErrorCode.notAvailable, \"no result found\")\n}\n\n/**\n * 高级vlookup。\n * @customfunction\n * @param range 查找范围\n * @param resultIndex 如果找到匹配行，要返回结果的列\n * @param defaultValue 如果找不到匹配行，返回的默认值\n * @param [lookupArgs] 匹配条件。每个匹配条件由3个值构成：匹配列、匹配值、匹配模式（0：完全相等；1：字符串包含）。\n * @returns 匹配到的内容或默认值\n */\nexport function super_vlookup(range: any[][], resultIndex: number, defaultValue: any, lookupArgs: any[]) {\n    console.log(\"range:\" , range)\n    console.log(\"functions:\", lookupArgs)\n    const args = unpackLookupArgs(lookupArgs)\n    console.log(\"args:\", args)\n    if(args.length == 0) return \n    for(let r = 0; r < range.length; r++) {\n        const row = range[r]\n        const matches = args.filter(([index, value, mode]) => {\n            return isMatch(row[index-1], value, mode)\n        })\n        console.log(`row ${row} matchs ${matches.length}`)\n        if(matches.length == args.length) {\n            console.log(`found at row ${row}, return ${row[resultIndex-1]}`)\n            return row[resultIndex-1]\n        }\n    }\n    return defaultValue\n}\n\n// console.log(super_vlookup([[1,2,3],[4,5,6],[7,8,9]], 3, 0, 1, 4, 0, 2, 5, 1))\n\nfunction isMatch(value: any, match: any, mode: MatchMode) {\n    if(mode == MatchMode.Equals) {\n        return value == match\n    }\n    if(mode == MatchMode.Contains) {\n        return String(value).includes(String(match))\n    }\n    return false\n}\n\nfunction unpackLookupArgs(lookupArgs) {\n    const args = []\n    let last = lookupArgs\n    while (last.length >= 3) {\n        args.push(last.slice(0, 3))\n        last = last.slice(3)\n    }\n    return args\n}\nCustomFunctions.associate(\"TEST\", test);\nCustomFunctions.associate(\"VLOOKUP\", vlookup);\nCustomFunctions.associate(\"SUPER_VLOOKUP\", super_vlookup);"],"names":["MatchMode","CustomFunctions","associate","args","range","value","index","range_1","_i","row","Error","ErrorCode","notAvailable","resultIndex","defaultValue","lookupArgs","console","log","last","length","push","slice","unpackLookupArgs","r","matches","filter","_a","mode","match","Equals","Contains","String","includes","isMatch"],"sourceRoot":""}